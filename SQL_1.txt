Select title from film;
select * from film;
select * from actor;
select first_name, last_name,email from  customer;
--
select distinct release_year from film;
select distinct rental_rate from film;
select distinct rating from film;
--
select count(*) from actor;
--
SELECT count(*) from payment;
SELECT count(amount) from payment;
SELECT distinct amount from payment;
SELECT count(distinct amount) from payment;
--
SELECT first_name,last_name from customer
where first_name='David';
--
SELECT * FROM customer where first_name='Jared';
SELECT * from film where rental_rate>4 AND replacement_cost>=19.99 AND rating='R';
SELECT film_id from film where  rating !='R';
--
SELECT first_name,last_name, email from customer
where first_name='Nancy' AND last_name='Thomas';
--
select * from film;
SELECT description from film where title='Outlaw Hanky';
--
SELECT * FROM customer
ORDER BY first_name;

SELECT * FROM customer
ORDER BY first_name DESC;

SELECT store_id,first_name,last_name FROM customer
ORDER BY store_id DESC, first_name ASC ;
--
SELECT * FROM payment
ORDER BY payment_date 
LIMIT 5;

SELECT * FROM payment
WHERE amount!=0.00
ORDER BY payment_date DESC
LIMIT 5;
--
SELECT * from customer;
--
SELECT * from payment
Where amount BETWEEN 8 AND 9;
--
SELECT * FROM payment;
SELECT COUNT(amount) FROM payment
WHERE amount>5.00;
--
SELECT * FROM actor;
SELECT COUNT(*) FROM actor
WHERE first_name like 'P%';
--
SELECT * FROM address;
SELECT COUNT(distinct (district)) FROM address;
--
SELECT * FROM address;
SELECT distinct district FROM address;
--
SELECT * FROM film;
SELECT COUNT(*) FROM film
WHERE rating='R' AND replacement_cost>=5.00 AND replacement_cost<=15.00;
--
SELECT COUNT(*) FROM film
WHERE rating='R' AND replacement_cost BETWEEN 5 AND 15;
--
SELECT COUNT(*) FROM film
WHERE title LIKE '%Truman%';
--
SELECT * FROM payment;
SELECT customer_id FROM payment
GROUP BY customer_id
ORDER BY customer_id;
--
SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC;
--
SELECT customer_id,staff_id, SUM(amount) FROM payment
GROUP BY staff_id,customer_id
ORDER BY customer_id;
--
SELECT DATE(payment_date), SUM(amount) FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount) DESC;
--
SELECT * FROM payment;
SELECT staff_id,COUNT(staff_id) FROM payment
GROUP BY(staff_id);
--
SELECT * FROM film;
SELECT ROUND(AVG(replacement_cost),2),rating FROM film
GROUP BY rating
ORDER BY ROUND(AVG(replacement_cost),2) DESC;
--
SELECT customer_id,SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;
--
SELECT customer_id, SUM(amount) FROM payment
WHERE customer_id NOT IN (184,87,477)
GROUP BY customer_id;

SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
HAVING SUM(amount)>100;
--
SELECT customer_id,COUNT(customer_id) FROM payment
GROUP BY customer_id
HAVING COUNT(customer_id)>=40
ORDER BY COUNT(customer_id);
--
SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id='2'
GROUP BY customer_id
HAVING SUM(amount)>110 ;

--INNER JOIN--
SELECT * FROM payment
INNER JOIN customer
ON payment.customer_id=customer.customer_id;

SELECT payment_id,payment.customer_id,first_name FROM payment
INNER JOIN customer
ON payment.customer_id=customer.customer_id;

--FULL OUTER JOIN--
SELECT * FROM customer
FULL OUTER JOIN payment
ON customer.customer_id =payment.customer_id
WHERE customer.customer_id IS null OR payment.payment_id IS null;

--LEFT OUTER JOIN--
SELECT film.film_id,film.title,inventory_id, store_id FROM film
LEFT JOIN inventory 
ON inventory.film_id=film.film_id
WHERE inventory.film_id IS null;
--
SELECT* FROM address;
SELECT* FROM customer;
SELECT email,district FROM customer
INNER JOIN address
ON customer.customer_id= address.address_id
WHERE address.district='California';
--
SELECT * FROM film;
SELECT * FROM actor
WHERE first_name='Nick' AND last_name='Wahlberg';

SELECT title,first_name,last_name FROM actor
INNER JOIN film_actor
on actor.actor_id=film_actor.actor_id
INNER JOIN film
ON film_actor.film_id=film.film_id
WHERE first_name='Nick' AND last_name='Wahlberg';
--
SHOW ALL;
SHOW TIMEZONE;
SELECT NOW();
SELECT TIMEOFDAY();
SELECT CURRENT_TIME;
SELECT CURRENT_DATE;
--
SELECT * FROM payment;
SELECT EXTRACT(YEAR FROM payment_date) AS year FROM payment;
SELECT AGE(payment_date) FROM payment;
SELECT TO_CHAR(payment_date,'MONTH-YYYY') FROM payment;
--
SELECT DISTINCT(TO_CHAR(payment_date,'MONTH')) AS MONTH FROM payment;
SELECT COUNT(*) FROM payment
WHERE EXTRACT(dow FROM payment_date)=1;
--
SELECT * FROM film;
SELECT ROUND(rental_rate/replacement_cost,2)*100 AS percent_cost FROM film;
-- 
SELECT length(first_name) FROM customer;
SELECT upper(first_name) || ' '|| upper(last_name) AS full_name FROM customer;
SELECT LOWER(LEFT(first_name,1))||LOWER(last_name)||'@gmail.com' AS email FROM customer;
--
SELECT title,rental_rate FROM film
WHERE rental_rate> (SELECT AVG(rental_rate) FROM film);

SELECT film_id,title FROM film
WHERE film_id IN
(SELECT inventory.film_id
FROM rental
INNER JOIN inventory
ON inventory.inventory_id=rental.inventory_id
WHERE return_date BETWEEN '2005-05-29'AND '2005-05-30');
--
SELECT first_name, last_name
FROM customer AS c
WHERE  NOT EXISTS (SELECT * FROM payment AS p 
WHERE p.customer_id=c.customer_id AND amount>11);
--
SELECT * FROM inventory;
SELECT release_year, title, length FROM film
WHERE release_year BETWEEN '2000' AND '2006' 
AND length>(SELECT AVG(length) FROM film)
ORDER BY length DESC;
--
SELECT f1.length, f1.title, f2.title FROM film AS f1
INNER JOIN film as f2 ON f1.film_id = f2.film_id
AND f1.length=f2.length
ORDER BY f1.length DESC;


  
